// The intuition and quick methode is to find the final text result.
// You can just use a string if you don't care cost on string modification.
// Or you can use a stack or string builder to do it in O(N).

// Use stack to avoid string modification.
// Time O(N) and space O(N).


// Follow up: O(1) Space

// Can you do it in O(N) time and O(1) space?
// I believe you have one difficulty here:
// When we meet a char, we are not sure if it will be still there or be deleted.

// However, we can do a back string compare (just like the title of problem).
// If we do it backward, we meet a char and we can be sure this char won't be deleted.
// If we meet a '#', it tell us we need to skip next lowercase char.

// The idea is that, read next letter from end to start.
// If we meet #, we increase the number we need to step back, until back = 0


class Solution {
    public boolean backspaceCompare(String s, String t) {
        int i = s.length() - 1, j = t.length() - 1, back;
        while(true){
            back = 0;
            while(i >= 0 && (back > 0 || s.charAt(i) == '#')){
                back += s.charAt(i) == '#' ? 1 : -1;
                i--;
            }
            back = 0;
            while(j >= 0 && (back > 0 || t.charAt(j) == '#')){
                back += t.charAt(j) == '#' ? 1 : -1;
                j--;
            }
            if(i >= 0 && j >= 0 && s.charAt(i) == t.charAt(j)){
                i--;
                j--;
            }else{
                break;
            }
        }
        return i == -1 && j == -1;
    }
}
